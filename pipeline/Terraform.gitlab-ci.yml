variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_STATE_NAME: ${TF_STATE_NAME:terraform.tfstate}

cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}

fmt:
  stage: check
  script:
    - cd "${TF_ROOT}"
    - terraform fmt
  allow_failure: true

validate:
  stage: test
  script:
    - cd "${TF_ROOT}"
    - terraform init
    - terraform validate

plan:
  stage: build
  script:
    - cd "${TF_ROOT}"
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $CI_JOB_JWT_V2
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"
    - terraform plan -out=plan
  resource_group: ${TF_STATE_NAME}
  artifacts:
    paths:
      - ${TF_ROOT}/plan

apply:
  stage: deploy
  script:
    - cd "${TF_ROOT}"
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $CI_JOB_JWT_V2
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"
    - terraform apply
  resource_group: ${TF_STATE_NAME}
  environment: production
  dependencies:
    - plan

destroy:
  stage: cleanup
  script:
    - cd "${TF_ROOT}"
    - >
      STS=($(aws sts assume-role-with-web-identity
      --role-arn ${ROLE_ARN}
      --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
      --web-identity-token $CI_JOB_JWT_V2
      --duration-seconds 3600
      --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
      --output text))
    - export AWS_ACCESS_KEY_ID="${STS[0]}"
    - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
    - export AWS_SESSION_TOKEN="${STS[2]}"
    - terraform destroy
  resource_group: ${TF_STATE_NAME}
  environment: production
  dependencies:
    - plan
    - apply
